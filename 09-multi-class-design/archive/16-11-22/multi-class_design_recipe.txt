RECORD THIS CHALLENGE

1. Describe the Problem
- Put or write the user story here. Add any clarifying notes you might have.

# 1
As a user
So that I can record my experiences
I want to keep a regular diary
    # Diary class (create a diary; add instances of DiaryEntry to diary)
    # DiaryEntry class (create diary entries)

# 2
As a user
So that I can reflect on my experiences
I want to read my past diary entries
    # in Diary class: some kind of return method, e.g., to return all entries?

# 3
As a user
So that I can reflect on my experiences in my busy day
I want to select diary entries to read based on how much time I have and my reading speed
    # in Diary class?: method like #best_entry to work out longest entry to read in given time with given reading speed (wpm)

# 4
As a user
So that I can keep track of my tasks
I want to keep a todo list along with my diary
    # ToDo class to create instances of todos?
    # ToDoList class to create list and keep track of tasks?

# 5
As a user
So that I can keep track of my contacts
I want to see a list of all of the mobile phone numbers in all my diary entries
    # (ContactsList class?)
    # Diary/DiaryEntry class searches for mobile phone numbers in diary entries and adds these to a contacts_list in Diary/DiaryEntry/ContactList class?



2. Design the Class System
- Consider diagramming out the classes and their relationships. (Can use websites like asciiflow.com, excalidraw.com, draw.io, or miro.com for this)
- Also design the interface of each class in more detail.

Class Diary
  def initialize
  end

  def add(entry)
  end

  def read_all
  end

  def read_best_entry(wpm, minutes)
    # use word_count??
  end

  # maybe: word_count method
end

Class DiaryEntry
  def initialize(title,Â contents)
  end
end


Contacts can be included in its own class or within Diary/DiaryEntry



3. Create Examples as Integration Tests
- Create examples of the classes being used together in different situations and combinations that reflect the ways in which the system will be used.

#read_all
entry_1 = DiaryEntry.new("Title 1", "One")
entry_2 = DiaryEntry.new("Title 2", "Two")
diary = Diary.new
diary.add(entry_1)
diary.add(entry_2)
diary.read_all => ["One", "Two"]

#read_best_entry
# 1 (two entries, one short enough)
entry_1 = DiaryEntry.new("Title 1", "One two three four five")
entry_2 = DiaryEntry.new("Title 2", "Six seven eight")
diary = Diary.new
diary.add(entry_1)
diary.add(entry_2)
diary.read_best_entry(3, 1) => "Six seven eight"

#read_best_entry
# 2 (two entries, both too long)
entry_1 = DiaryEntry.new("Title 1", "One two three four five")
entry_2 = DiaryEntry.new("Title 2", "Six seven eight")
diary = Diary.new
diary.add(entry_1)
diary.add(entry_2)
diary.read_best_entry(2, 1) => raise "You don't have enough time to read an entry"




4. Create Examples as Unit Tests
- Create examples, where appropriate, of the behaviour of each relevant class at a more granular level of detail.
- Encode each example as a test. You can add to the list as you go.

DiaryEntry
entry = diaryEntry.new("", "") => [raise "not a valid entry"]
entry = diaryEntry.new(4, nil) => [raise "not a valid entry"]


Diary
diary = Diary.new
diary.is_a (Diary) => [true]

diary = Diary.new
diary.read_all => [raise "no entries have been added"]

diary = Diary.new
diary.read_best_entry => [raise "no entries have been added"]


5. Implement the Behaviour
- After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour.
